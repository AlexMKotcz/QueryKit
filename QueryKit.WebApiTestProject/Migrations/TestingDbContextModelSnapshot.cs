// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QueryKit.WebApiTestProject.Database;

#nullable disable

namespace QueryKit.WebApiTestProject.Migrations
{
    [DbContext(typeof(TestingDbContext))]
    partial class TestingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.TestingPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("BirthMonth")
                        .HasColumnType("text")
                        .HasColumnName("birth_month");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("boolean")
                        .HasColumnName("favorite");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<DateTimeOffset?>("SpecificDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("specific_date");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.TestingPerson", b =>
                {
                    b.OwnsOne("QueryKit.WebApiTestProject.Entities.Address", "PhysicalAddress", b1 =>
                        {
                            b1.Property<Guid>("TestingPersonId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_country");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_line1");

                            b1.Property<string>("Line2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_line2");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_state");

                            b1.HasKey("TestingPersonId");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("TestingPersonId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.Navigation("PhysicalAddress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
